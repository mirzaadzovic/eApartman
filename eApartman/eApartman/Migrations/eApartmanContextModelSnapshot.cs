// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eApartman.Database;

namespace eApartman.Migrations
{
    [DbContext(typeof(eApartmanContext))]
    partial class eApartmanContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Bosnian_Latin_100_BIN")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eApartman.Database.Adresa", b =>
                {
                    b.Property<int>("AdresaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Broj")
                        .HasColumnType("int");

                    b.Property<int?>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AdresaId");

                    b.HasIndex("GradId");

                    b.ToTable("Adresa");
                });

            modelBuilder.Entity("eApartman.Database.Apartman", b =>
                {
                    b.Property<int>("ApartmanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdresaId")
                        .HasColumnType("int");

                    b.Property<int?>("ApartmanTipId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("CheckoutVrijeme")
                        .HasColumnType("time");

                    b.Property<decimal>("Cijena")
                        .HasColumnType("money");

                    b.Property<bool>("ImaBalkon")
                        .HasColumnType("bit");

                    b.Property<bool>("ImaParking")
                        .HasColumnType("bit");

                    b.Property<int>("MaxOsoba")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("PetFriendly")
                        .HasColumnType("bit");

                    b.Property<byte[]>("SlikaProfilnaFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("SlikaProfilnaThumbnail")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("VlasnikId")
                        .HasColumnType("int");

                    b.HasKey("ApartmanId");

                    b.HasIndex("AdresaId");

                    b.HasIndex("ApartmanTipId");

                    b.HasIndex("VlasnikId");

                    b.ToTable("Apartman");
                });

            modelBuilder.Entity("eApartman.Database.ApartmanSlika", b =>
                {
                    b.Property<int>("SlikaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApartmanId")
                        .HasColumnType("int");

                    b.Property<byte[]>("SlikaFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("SlikaThumbnail")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("SlikaId")
                        .HasName("pk_slika");

                    b.HasIndex("ApartmanId");

                    b.ToTable("ApartmanSlika");
                });

            modelBuilder.Entity("eApartman.Database.ApartmanTip", b =>
                {
                    b.Property<int>("ApartmanTipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApartmanTipNaziv")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApartmanTipId");

                    b.ToTable("ApartmanTip");
                });

            modelBuilder.Entity("eApartman.Database.Drzava", b =>
                {
                    b.Property<int>("DrzavaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sifra")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("DrzavaId");

                    b.ToTable("Drzava");
                });

            modelBuilder.Entity("eApartman.Database.Grad", b =>
                {
                    b.Property<int>("GradId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DrzavaId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PostanskiBroj")
                        .HasColumnType("int");

                    b.HasKey("GradId");

                    b.HasIndex("DrzavaId");

                    b.ToTable("Grad");
                });

            modelBuilder.Entity("eApartman.Database.Korisnik", b =>
                {
                    b.Property<int>("KorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatumRegistracije")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("KorisnikId");

                    b.ToTable("Korisnik");
                });

            modelBuilder.Entity("eApartman.Database.KorisnikUloga", b =>
                {
                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.HasKey("KorisnikId", "UlogaId")
                        .HasName("pk_korisnikuloga");

                    b.HasIndex("UlogaId");

                    b.ToTable("KorisnikUloga");
                });

            modelBuilder.Entity("eApartman.Database.Moderator", b =>
                {
                    b.Property<int>("ModeratorId")
                        .HasColumnType("int");

                    b.Property<int>("VlasnikId")
                        .HasColumnType("int");

                    b.HasKey("ModeratorId");

                    b.HasIndex("VlasnikId");

                    b.ToTable("Moderator");
                });

            modelBuilder.Entity("eApartman.Database.Popust", b =>
                {
                    b.Property<int>("PopustId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Procent")
                        .HasColumnType("money");

                    b.HasKey("PopustId");

                    b.ToTable("Popust");
                });

            modelBuilder.Entity("eApartman.Database.Rezervacija", b =>
                {
                    b.Property<int>("RezervacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApartmanId")
                        .HasColumnType("int");

                    b.Property<int?>("BrojDana")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(datediff(day,[DatumCheckIn],[DatumCheckOut]))", true);

                    b.Property<int>("BrojOsoba")
                        .HasColumnType("int");

                    b.Property<decimal?>("Cijena")
                        .HasColumnType("money");

                    b.Property<DateTime>("DatumCheckIn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DatumCheckOut")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatumRezervacije")
                        .HasColumnType("datetime");

                    b.Property<int?>("GostId")
                        .HasColumnType("int");

                    b.Property<string>("GostIme")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("GostPrezime")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("Izvrsena")
                        .HasColumnType("bit");

                    b.Property<bool>("Otkazana")
                        .HasColumnType("bit");

                    b.Property<int?>("PopustId")
                        .HasColumnType("int");

                    b.Property<string>("Poruka")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RezervacijaId");

                    b.HasIndex("ApartmanId");

                    b.HasIndex("GostId");

                    b.HasIndex("PopustId");

                    b.ToTable("Rezervacija");
                });

            modelBuilder.Entity("eApartman.Database.Uloga", b =>
                {
                    b.Property<int>("UlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Opis")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UlogaNaziv")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UlogaId");

                    b.ToTable("Uloga");
                });

            modelBuilder.Entity("eApartman.Database.Utisak", b =>
                {
                    b.Property<int>("UtisakId")
                        .HasColumnType("int");

                    b.Property<int>("ApartmanId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DatumKreiranja")
                        .HasColumnType("datetime");

                    b.Property<string>("Komentar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int?>("OcjenaCistoca")
                        .HasColumnType("int");

                    b.Property<int?>("OcjenaLokacija")
                        .HasColumnType("int");

                    b.Property<int?>("OcjenaVlasnik")
                        .HasColumnType("int");

                    b.Property<int?>("OcjenaWiFi")
                        .HasColumnType("int");

                    b.HasKey("UtisakId");

                    b.HasIndex("ApartmanId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Utisak");
                });

            modelBuilder.Entity("eApartman.Database.Adresa", b =>
                {
                    b.HasOne("eApartman.Database.Grad", "Grad")
                        .WithMany("Adresas")
                        .HasForeignKey("GradId")
                        .HasConstraintName("fk_grad");

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("eApartman.Database.Apartman", b =>
                {
                    b.HasOne("eApartman.Database.Adresa", "Adresa")
                        .WithMany("Apartmen")
                        .HasForeignKey("AdresaId")
                        .HasConstraintName("fk_adresa");

                    b.HasOne("eApartman.Database.ApartmanTip", "ApartmanTip")
                        .WithMany("Apartmen")
                        .HasForeignKey("ApartmanTipId")
                        .HasConstraintName("fk_apartmantip");

                    b.HasOne("eApartman.Database.Korisnik", "Vlasnik")
                        .WithMany("Apartmen")
                        .HasForeignKey("VlasnikId")
                        .HasConstraintName("fk_vlasnik");

                    b.Navigation("Adresa");

                    b.Navigation("ApartmanTip");

                    b.Navigation("Vlasnik");
                });

            modelBuilder.Entity("eApartman.Database.ApartmanSlika", b =>
                {
                    b.HasOne("eApartman.Database.Apartman", "Apartman")
                        .WithMany("ApartmanSlikas")
                        .HasForeignKey("ApartmanId")
                        .HasConstraintName("fk_apartman");

                    b.Navigation("Apartman");
                });

            modelBuilder.Entity("eApartman.Database.Grad", b =>
                {
                    b.HasOne("eApartman.Database.Drzava", "Drzava")
                        .WithMany("Grads")
                        .HasForeignKey("DrzavaId")
                        .HasConstraintName("fk_drzava");

                    b.Navigation("Drzava");
                });

            modelBuilder.Entity("eApartman.Database.KorisnikUloga", b =>
                {
                    b.HasOne("eApartman.Database.Korisnik", "Korisnik")
                        .WithMany("KorisnikUlogas")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("fk_korisnik")
                        .IsRequired();

                    b.HasOne("eApartman.Database.Uloga", "Uloga")
                        .WithMany("KorisnikUlogas")
                        .HasForeignKey("UlogaId")
                        .HasConstraintName("fk_uloga")
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("eApartman.Database.Moderator", b =>
                {
                    b.HasOne("eApartman.Database.Korisnik", "ModeratorNavigation")
                        .WithOne("ModeratorModeratorNavigation")
                        .HasForeignKey("eApartman.Database.Moderator", "ModeratorId")
                        .HasConstraintName("fk_moderatorkorisnik")
                        .IsRequired();

                    b.HasOne("eApartman.Database.Korisnik", "Vlasnik")
                        .WithMany("ModeratorVlasniks")
                        .HasForeignKey("VlasnikId")
                        .HasConstraintName("fk_vlasnikkorisnik")
                        .IsRequired();

                    b.Navigation("ModeratorNavigation");

                    b.Navigation("Vlasnik");
                });

            modelBuilder.Entity("eApartman.Database.Rezervacija", b =>
                {
                    b.HasOne("eApartman.Database.Apartman", "Apartman")
                        .WithMany("Rezervacijas")
                        .HasForeignKey("ApartmanId")
                        .HasConstraintName("fk_apartmanrezervacija");

                    b.HasOne("eApartman.Database.Korisnik", "Gost")
                        .WithMany("Rezervacijas")
                        .HasForeignKey("GostId")
                        .HasConstraintName("fk_gost");

                    b.HasOne("eApartman.Database.Popust", "Popust")
                        .WithMany("Rezervacijas")
                        .HasForeignKey("PopustId")
                        .HasConstraintName("fk_popust");

                    b.Navigation("Apartman");

                    b.Navigation("Gost");

                    b.Navigation("Popust");
                });

            modelBuilder.Entity("eApartman.Database.Utisak", b =>
                {
                    b.HasOne("eApartman.Database.Apartman", "Apartman")
                        .WithMany("Utisaks")
                        .HasForeignKey("ApartmanId")
                        .HasConstraintName("fk_apartmanutisak")
                        .IsRequired();

                    b.HasOne("eApartman.Database.Korisnik", "Korisnik")
                        .WithMany("Utisaks")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("fk_korisnikutisak")
                        .IsRequired();

                    b.HasOne("eApartman.Database.Rezervacija", "UtisakNavigation")
                        .WithOne("Utisak")
                        .HasForeignKey("eApartman.Database.Utisak", "UtisakId")
                        .HasConstraintName("FK__Utisak__UtisakId__160F4887")
                        .IsRequired();

                    b.Navigation("Apartman");

                    b.Navigation("Korisnik");

                    b.Navigation("UtisakNavigation");
                });

            modelBuilder.Entity("eApartman.Database.Adresa", b =>
                {
                    b.Navigation("Apartmen");
                });

            modelBuilder.Entity("eApartman.Database.Apartman", b =>
                {
                    b.Navigation("ApartmanSlikas");

                    b.Navigation("Rezervacijas");

                    b.Navigation("Utisaks");
                });

            modelBuilder.Entity("eApartman.Database.ApartmanTip", b =>
                {
                    b.Navigation("Apartmen");
                });

            modelBuilder.Entity("eApartman.Database.Drzava", b =>
                {
                    b.Navigation("Grads");
                });

            modelBuilder.Entity("eApartman.Database.Grad", b =>
                {
                    b.Navigation("Adresas");
                });

            modelBuilder.Entity("eApartman.Database.Korisnik", b =>
                {
                    b.Navigation("Apartmen");

                    b.Navigation("KorisnikUlogas");

                    b.Navigation("ModeratorModeratorNavigation");

                    b.Navigation("ModeratorVlasniks");

                    b.Navigation("Rezervacijas");

                    b.Navigation("Utisaks");
                });

            modelBuilder.Entity("eApartman.Database.Popust", b =>
                {
                    b.Navigation("Rezervacijas");
                });

            modelBuilder.Entity("eApartman.Database.Rezervacija", b =>
                {
                    b.Navigation("Utisak");
                });

            modelBuilder.Entity("eApartman.Database.Uloga", b =>
                {
                    b.Navigation("KorisnikUlogas");
                });
#pragma warning restore 612, 618
        }
    }
}
